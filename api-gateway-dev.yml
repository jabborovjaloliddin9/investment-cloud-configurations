spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: user-service
          predicates:
            - Path=/user-service/**
          filters:
            - StripPrefix=1
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
          uri: lb://user-service

        - id: file-service
          predicates:
            - Path=/file-service/**
          uri: lb://file-service

        - id: auth-service
          predicates:
            - Path=/auth-service/**
          uri: lb://auth-service

        - id: currency-service
          predicates:
            - Path=/currency-service/**
          uri: lb://currency-service

        - id: account-service
          predicates:
            - Path=/account-service/**
#          filters:
#            - StripPrefix=1
#            - name: RequestRateLimiter
#            - args:
#                redis-rate-limiter.replenishRate: 10
#                redis-rate-limiter.burstCapacity: 20
#                redis-rate-limiter.requestedTokens: 1
          uri: lb://account-service

  data:
    redis:
      port: 6379
      host: localhost

##user-service metirkalarini olish uchun ishlatiladi
#management:
#  endpoints:
#    web:
#      exposure:
#        include: '*'
#  endpoint:
#    health:
#      show-details: always
#  health:
#    diskspace:
#      enabled: true
#    circuitbreakers:
#      ebabled: true
#    ratelimiters:
#      enabled: true
#    refresh:
#      enabled: true
#
#  metrics:
#    tags:
#      application:
#        ${spring.application.name}
#    distribution:
#      percentiles-histogram:
#        http:
#          server:
#            requests:
#              true
#        resilience4j:
#          cicuitbreaker:
#            calls:
#              true
#
#
#resilience4j:
#  circuitbreaker:
#    config:
#      default:
#        registerHealthIndicator: true
#    instances:
#      auth-service:
#        register-helth-indicator: true
#        event-consumer-buffer-size: 10
#        failure-rate-threshold: 50 #oxirgi 10 s da yuborirgan so`rovlarining 50 % failur bo`ladigan bo`lsa Circuit Breaker OPEN holatga o`tadi
#        minimum-number-of-calls: 5
#        automatic-translation-from-open-to-half-open-enabled: true
#        wait-duration-in-open-state: 5s #Circuit Breaker OPEN holatda 5s bo`ladi va shundan keyin HALF_OPEN holatga o`tadi
#        permitted-number-of-calls-in-half-open-state: 3 #HALF_OPEN holatda yana  marta so`rov yuboradi, agar yuborilgan so`rovlarning 50% failur bo`lsa OPEN holatga o`tadi, aks holda CLOSED holatga o`tadi
#        sliding-window-size: 10 #oxirgi 10 s dagi so`rovlarga qaraydi
#        sliding-window-type: TIME_BASED #2 xil bo`ladi: COUNT_BASED, TIME_BASED, agar COUNT_BASED bo`lsa oxirgi n ta so`rovga qaraydi, agar TIME_BASED bo`lsa oxirgi t vaqtdagi so`rovlarga qaraydi
#      account-service:
#        register-helth-indicator: true
#        event-consumer-buffer-size: 10
#        failure-rate-threshold: 50
#        minimum-number-of-calls: 5
#        automatic-translation-from-open-to-half-open-enabled: true
#        wait-duration-in-open-state: 6s
#        permitted-number-of-calls-in-half-open-state: 3
#        sliding-window-size: 10
#        sliding-window-type: COUNT_BASED
##      recordFailurePredicate: io.github.robwin.exception.RecordFailurePrediate